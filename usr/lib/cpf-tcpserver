#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -o pipefail

## Do not use echos for user or debug output,
## because those are send back to the client, which gets confused.

LOG="/var/log/controlportfilt.log"

error_handler() {
   local exit_code="$?"
   local bash_command="$BASH_COMMAND"
   if [ "$ID" = "" ] ; then
      ID="No_ID"
   fi
   cleanup || true
   echo "$ID ERROR: exit_code: $exit_code | bash_command: $bash_command" >> "$LOG"
   exit 1
}

trap error_handler ERR

cleanup() {
   if [ -d "$temp_directory" ]; then
      rm --recursive "$temp_directory"
   fi
}

trap_sigint() {
   if [ "$ID" = "" ] ; then
      ID="No_ID"
   fi
   cleanup
   echo "$ID INFO: SIGINT received. Exiting." >> "$LOG"
   exit 0
}

trap "trap_sigint" SIGINT

kill_nc_pid() {
   trap error_handler ERR
   local ps_p_exit_code
   ps_p_exit_code="0"
   ps -p "$NC_PID" >/dev/null 2>/dev/null || { ps_p_exit_code="$?" ; true; };
   echo "$ID debug: ps_p_exit_code: $ps_p_exit_code" >> "$LOG"
   if [ "$ps_p_exit_code" = "0" ]; then
      kill -sigterm "$NC_PID" >> "$LOG" 2>&1 || true
   fi
}

ID="$(uuidgen -r)"

cpf_pid="$$"

echo "$ID INFO: Getting connection... cpf_pid: $cpf_pid | LD_PRELOAD: $LD_PRELOAD" >> "$LOG"

kill_after="2s"
timeout_after="2s"

temp_directory="$(mktemp --directory)"
IN="$temp_directory/in_${ID}"
OUT="$temp_directory/out_${ID}"

CONTROL_PORT_FILTER_LIMIT_STRING_LENGTH="true"
CONTROL_PORT_FILTER_EXCESSIVE_STRING_LENGTH="128"

## {{{ /etc/controlportfilt.d

if [ -d /etc/controlportfilt.d ]; then
   for i in /etc/controlportfilt.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         bash -n "$i"
         source "$i"
      fi
   done
else
   echo "$ID ERROR: configuration folder /etc/controlportfilt.d does not exist."
   exit 1
fi

## }}}

## {{{ Verbose Logging

if [ "$CONTROL_PORT_FILTER_VERBOSE" = "1" ]; then
   set -x

   exec >  >(tee -a "$LOG")
   exec 2> >(tee -a "$LOG" >&2)

   set -o functrace
   shopt -s extdebug

   #trap 'true "BASH_COMMAND: $BASH_COMMAND | FUNCNAME: ${FUNCNAME[1]} | BASH_LINENO: ${BASH_LINENO[0]} | BASH_SOURCE: ${BASH_SOURCE[1]}"' DEBUG
   trap 'true "${FUNCNAME[1]}: $BASH_COMMAND"' DEBUG
fi

## }}}

## {{{ CONTROL_PORT_FILTER_LOWERCASE_WHITELIST

i=0
for element in "${CONTROL_PORT_FILTER_WHITELIST[@]}"; do
   CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]="${element,,}"
   i=$((${i} + 1))
done

for element in "${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"; do
   true "CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: $element"
done

## }}}

mkfifo "$IN"
mkfifo "$OUT"

## Sanity tests.
test -p "$IN"
test -p "$OUT"

check_tor() {
   trap error_handler ERR

   if [ -f "/var/run/tor/control.authcookie" ]; then
      tor_authcookie="0"
   else
      tor_authcookie="1"
   fi

   if [ -f "/var/run/tor/tor.pid" ]; then
      tor_pid="1"

      ## || true to prevent a race condition.
      tor_pid="$(cat "/var/run/tor/tor.pid")" || true

      tor_pid_running="0"
      kill -0 "$tor_pid" || { tor_pid_running="$?" ; true; };
   else
      tor_pid="0"
      tor_pid_running="1"
   fi

   if [ "$tor_authcookie" = "0" ] && [ "$tor_pid_running" = "0" ]; then
      check_tor_result="0"
   else
      check_tor_result="1"
   fi
}

write_back() {
   trap error_handler ERR

   local temp
   temp="${1+"$@"}"
   ## Don't use variables in the printf format string.
   ## https://github.com/koalaman/shellcheck/wiki/SC2059
   printf "%s\r\n" "$temp"
   echo "$ID BACK: $temp" >> "$LOG"
}

received() {
   trap error_handler ERR

   true "${1+"$@"}"
   echo "$ID GOT: ${1+"$@"}" >> "$LOG"
}

check_tor
if [ ! "$check_tor_result" = "0" ]; then
   echo "\
$ID INFO: \
check_tor_result: $check_tor_result | \
tor_pid: $tor_pid | \
tor_pid_running: $tor_pid_running | \
tor_authcookie: $tor_authcookie \
Exiting (1)...\
" >> "$LOG"
   exit 0
fi

while read -r line; do

   if [ "$CONTROL_PORT_FILTER_LIMIT_STRING_LENGTH" = "true" ]; then
      actual_string_length="${#line}"
      if [ "$actual_string_length" -gt "$CONTROL_PORT_FILTER_EXCESSIVE_STRING_LENGTH" ]; then
         write_back '510 Excessive string length. ""'
         continue
      fi
   fi

   cleaned_reply="$line"
   ## strip newlines from input
   cleaned_reply="$(echo "$cleaned_reply" | tr '\r' ' ')"
   cleaned_reply="$(echo "$cleaned_reply" | tr '\n' ' ')"

   ## strip trailing empty spaces from input
   cleaned_reply="$(echo "$cleaned_reply" | sed -e "s/ \{1,\}$//")"

   received "$cleaned_reply"

   if [ "$cleaned_reply" = "" ]; then
      write_back '510 Unrecognized command ""'
      continue
   fi

   read -r first_word _ <<< "$cleaned_reply"

   ## We do not check any control port password or auth cookies here,
   ## because only only safe commands are accepted anyway. Whonix-Workstation
   ## has no access to auth password / auth cookie anyway and sharing such a
   ## secret would be difficult.
   ## The only useful thing here could be to check if Tors control port is
   ## available at all, but this would also make this script even slower.

   if [ "${first_word,,}" = "authenticate" ]; then
      write_back "250 OK"
      continue
   fi

   if [ "${first_word,,}" = "quit" ]; then
      break
   fi

   ok="0"
   for element in "${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"; do
      true "CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: $element"

      if [ "${cleaned_reply,,}" = "$element" ]; then
         ok="1"
         true "ok: reply ${cleaned_reply,,} = element $element"
         break
      fi
   done

   if [ ! "$ok" = "1" ]; then
      write_back "510 Prohibited command \"$cleaned_reply\""
      continue
   fi

   if [ "$CONTROL_PORT_FILTER_LIMIT_GETINFO_NET_LISTENERS_SOCKS" = "1" ]; then
      ## Lie when we are asked "GETINFO net/listeners/socks".
      ## This is documented on Whonix Control Port Filter Proxy Design page,
      ## search for lie.
      lie_when="GETINFO net/listeners/socks"

      if [ "${cleaned_reply,,}" = "${lie_when,,}" ]; then
         true "Got \"$cleaned_reply\" let us lie and forge the answer to make Tor Button happy."
         write_back '250-net/listeners/socks="127.0.0.1:9150"'
         continue
      fi
   fi

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   ## discussion about netcat-traditional vs netcat-openbsd vs tcpcat:
   ## https://www.whonix.org/forum/index.php/topic,444.0.html
   nc 127.0.0.1 9051 < "$OUT" > "$IN" &
   NC_PID="$!"

   check_tor
   if [ ! "$check_tor_result" = "0" ]; then
      echo "\
$ID INFO: \
check_tor_result: $check_tor_result | \
tor_pid: $tor_pid | \
tor_pid_running: $tor_pid_running | \
tor_authcookie: $tor_authcookie \
Breaking (2)...\
" >> "$LOG"
      kill_nc_pid
      break
   fi

   ## CookieAuthFileGroupReadable is set to 1 by Tor default.
   ## User "user" is a part of the group "debian-tor".

   ## Still carefully checking if /var/run/tor/control.authcookie could be
   ## read to prevent a race condition.

   xxd_exit_code="0"
   temporary_variable_one="$(xxd -c 32 -g 0 "/var/run/tor/control.authcookie")" || { xxd_exit_code="$?" ; true; };

   if [ ! "$xxd_exit_code" = "0" ]; then
      check_tor

      echo "$ID INFO: xxd returned non-zero: $xxd_exit_code." >> "$LOG"
      echo "\
$ID INFO: \
check_tor_result: $check_tor_result | \
tor_pid: $tor_pid | \
tor_pid_running: $tor_pid_running | \
tor_authcookie: $tor_authcookie \
Breaking (3)...\
" >> "$LOG"
      kill_nc_pid
      break
   fi

   read -r temporary_variable_two cookie _ <<< "$temporary_variable_one"

   ## Open Tor control port connection.
   timeout --kill-after="$kill_after" "$timeout_after" echo "AUTHENTICATE $cookie" > "$OUT" &
   wait "$!"

   ## Send command.
   timeout --kill-after="$kill_after" "$timeout_after" echo "$cleaned_reply" > "$OUT" &
   wait "$!"

   ## Close Tor control port connection.
   timeout --kill-after="$kill_after" "$timeout_after" echo "QUIT" > "$OUT" &
   wait "$!"

   ## Get results.
   var="$(timeout --kill-after="$kill_after" "$timeout_after" cat "$IN")"

   kill_nc_pid

   if [ "$var" = "" ]; then
      write_back "$ID ERROR: var is empty."
      break
   fi

   true "var: $var"

   echo "$var" > "$temp_directory/temp_${ID}"

   ## Get the first line.
   first_line="$(cat "$temp_directory/temp_${ID}" | sed -n 1,1p)"
   ## strip newlines from input
   first_line="$(echo "$first_line" | tr '\r' ' ')"
   first_line="$(echo "$first_line" | tr '\n' ' ')"
   ## strip trailing empty spaces from input
   first_line="$(echo "$first_line" | sed -e "s/ \{1,\}$//")"

   if [ "$first_line" = "250 OK" ]; then
      true
   else
      echo "$ID ERROR: authentication error. first_line: $first_line" >> "$LOG"
      write_back "$first_line"
      break
   fi

   ## Get the second line.
   second_line="$(cat "$temp_directory/temp_${ID}" | sed -n 2,2p)"
   ## strip newlines from input
   second_line="$(echo "$second_line" | tr '\r' ' ')"
   second_line="$(echo "$second_line" | tr '\n' ' ')"
   ## strip trailing empty spaces from input
   second_line="$(echo "$second_line" | sed -e "s/ \{1,\}$//")"

   write_back "$second_line"

   if [ "$second_line" = "250 OK" ]; then
      ## Only got a "250 OK", that's all.
      continue
   fi

   ## Get the third line.
   third_line="$(cat "$temp_directory/temp_${ID}" | sed -n 3,3p)"
   ## strip newlines from input
   third_line="$(echo "$third_line" | tr '\r' ' ')"
   third_line="$(echo "$third_line" | tr '\n' ' ')"
   ## strip trailing empty spaces from input
   third_line="$(echo "$third_line" | sed -e "s/ \{1,\}$//")"

   write_back "$third_line"

done

cleanup

echo "$ID INFO: End." >> "$LOG"
