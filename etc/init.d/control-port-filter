#! /bin/bash
### BEGIN INIT INFO
# Provides:          control-port-filter
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Control Port Filter Proxy
# Description:       Filters out dangerous control port messages
#                    in Tor control port.
### END INIT INFO

# Author: Patrick Schleizer <adrelanos@riseup.net>

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Control Port Filter Proxy"
NAME=controlportfilt
DAEMON=/usr/bin/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME/pid
SCRIPTNAME=/etc/init.d/$NAME

mkdir --parents /var/run/controlportfilt
chown --recursive debian-tor:debian-tor /var/run/controlportfilt

touch /var/log/controlportfilt.log
chown --recursive debian-tor:debian-tor /var/log/controlportfilt.log

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
   # Return
   #   0 if daemon has been started
   #   1 if daemon was already running
   #   2 if daemon could not be started

   source /usr/lib/anon-shared-helper-scripts/torsocks-remove-ld-preload

   start-stop-daemon \
      --start \
      --quiet \
      --background \
      --make-pidfile \
      --pidfile $PIDFILE \
      --chuid debian-tor:debian-tor \
      --exec "$DAEMON" -- \
      $DAEMON_ARGS \
         || return 2

   # Add code here, if necessary, that waits for the process to be ready
   # to handle requests from services started subsequently which depend
   # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
   # Return
   #   0 if daemon has been stopped
   #   1 if daemon was already stopped
   #   2 if daemon could not be stopped
   #   other if a failure occurred

   for i in $(pgrep -u debian-tor --full "$DAEMON"); do
      if [ ! "$i" = "" ]; then
         echo "$i" > "/var/run/controlportfilt/temp"

         /sbin/start-stop-daemon \
            --stop \
            --quiet \
            --pidfile "/var/run/controlportfilt/temp" \
            --signal TERM \
            --retry 5

      fi
   done

   for i in $(pgrep -u debian-tor --full "cpf-tcpserver"); do
      if [ ! "$i" = "" ]; then
         echo "$i" > "/var/run/controlportfilt/temp"

         /sbin/start-stop-daemon \
            --stop \
            --quiet \
            --pidfile "/var/run/controlportfilt/temp" \
            --signal TERM \
            --retry 5

      fi
   done

   rm -f "$PIDFILE"
   return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_stop
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
